
configfile: "config/config_analysis.yaml"

JOBID = config["JOBID"]
REFIN = config["REFIN"]
BIN_LOC = config["BIN_LOC"]
kraken_level = config["kraken_level"]
krakendb = config["krakendb"]
GTDB = config["GTDB"]
checkmdb = config["checkm_db_root"]

if BIN_LOC.endswith("/") == False :
    BIN_LOC = BIN_LOC + "/"
print("Location of genome bins: " + BIN_LOC)

# FILE_EX = config["FILE_EX"]
# MAPPING = config["MAPPING"]
# CONTIG_T = config["CONTIG_T"]
# P_THRESH = config["P_THRESH"]
# COUNT_METHOD = config["COUNT_METHOD"]

location = BIN_LOC + "Cluster_{CLUSTER}.fasta"

(CLUSTERS,) = glob_wildcards(location)

rule all:
    input:
        expand("results/kraken/{JOBID}_Cluster_{CLUSTERS}_report_kraken.out", JOBID = JOBID, CLUSTERS = CLUSTERS),

# localrules: kraken_merge, output

rule kraken:
    input:
        expand("{BIN_LOC}Cluster_{{CLUSTERS}}.fasta", BIN_LOC=BIN_LOC)
    output:
        report = "results/kraken/{JOBID}_Cluster_{CLUSTERS}_report_kraken.out",
    params:
        db = krakendb,
        output = "results/kraken/{JOBID}_Cluster_{CLUSTERS}_kraken.out"
    conda:
        "workflow/envs/kraken2.yaml"
    threads:
        16
    resources:
        mem_mb = 4000
    shell:
        """
        kraken2 -db {params.db} --threads {threads} --report {output.report} --output {params.output} --use-names {input}
        """
