samples= 'NAB1_T0 NAB1_T1 NAB1_T2 NAB1_T3 NAB1_T4 NAB1_T5 NAB1_T6 NAB1_T7 NAB1_T8 NAB1_T9 NAB1_T10 NAB1_T11 NAB1_T12 NAB1_T13 NAB1_T14 NAB1_T15 NAB1_T16 NAB1_T17 NAB2_T0 NAB2_T1 NAB2_T2 NAB2_T3 NAB2_T4 NAB2_T5 NAB2_T6 NAB2_T7 NAB2_T8 NAB2_T9 NAB2_T10 NAB2_T11 NAB2_T12 NAB2_T13 NAB2_T14 NAB2_T15 NAB2_T16 NAB2_T17 NAB3_T0 NAB3_T1 NAB3_T2 NAB3_T3 NAB3_T4 NAB3_T5 NAB3_T6 NAB3_T7 NAB3_T8 NAB3_T9 NAB3_T10 NAB3_T11 NAB3_T12 NAB3_T13 NAB3_T14 NAB3_T15 NAB3_T16 NAB3_T17 NAB4_T0 NAB4_T1 NAB4_T2 NAB4_T3 NAB4_T4 NAB4_T5 NAB4_T6 NAB4_T7 NAB4_T8 NAB4_T9 NAB4_T10 NAB4_T11 NAB4_T12 NAB4_T13 NAB4_T14 NAB4_T15 NAB4_T16 NAB4_T17 NAB_Feed_T9 NAB_Feed_T10 NAB_Feed_T11 NAB_Feed_T12 NAB_Feed_T13 NAB_Feed_T14 NAB_Feed_T15 NAB_Feed_T17' #should be in order want output
JOBID = 'NAB_all'
RAW_SR = 'data/'
REFIN = 'data/yw_polished_anvio.fasta'
THRESH = '1000'
P_THRESH = '0.99'

(job, part) = glob_wildcards('inter/{JOBID}_diffs{PART}.csv')

rule all:
    input:
      expand("bins/{JOBID}_output_{PART}.csv", JOBID = JOBID, PART = part),
      expand("bins/{JOBID}_parallel_sets_{PART}.csv", JOBID = JOBID, PART = part),
      expand("bins/{JOBID}_parallel_merged.out", JOBID = JOBID)

rule bin_feeder:
    input:
        diffs = 'inter/' + JOBID + '_diffs{PART}.csv'
    output:
        all = "bins/" + JOBID + "_output_{PART}.csv",
    params:
        thresh = P_THRESH, #add this in as a variable at the top later..
        all_diffs = expand("inter/{JOBID}_diffs.csv", JOBID = JOBID)
    conda:
        "envs/py3.yaml"
    shell:
        """
        python scripts/bin_feeder.py {input.diffs} {params.all_diffs} {params.thresh} {output.all}
        """

rule para_sets:
    input:
        bins = "bins/" + JOBID + "_output_{PART}.csv"
    output:
        "bins/" + JOBID + "_parallel_sets_{PART}.csv"
    params:
        thresh = P_THRESH
    conda:
        "envs/py3.yaml"
    shell:
        """
        python scripts/para_sets.py {input.bins} {output} {params.thresh}
        """

rule para_merge:
    input:
        expand("bins/{JOBID}_parallel_sets_{PART}.csv", JOBID=JOBID, PART = part)
    output:
        "bins/{JOBID}_parallel_merged.out"
    resources:
        mem_mb = 64000
    conda:
        "envs/py3.yaml"
    shell:
        """
        python scripts/parallel_merge_step2.py -i {input} -o {output}
        """

rule non_red_step:
    input:
      expand("bins/{JOBID}_parallel_merged.out", JOBID = JOBID)
    output:
      expand("bins/{JOBID}_non_red_list.out", JOBID = JOBID)
    conda:
      "envs/py3.yaml"
    shell:
      """
      python scripts/step3.py {input} {output}
      """
