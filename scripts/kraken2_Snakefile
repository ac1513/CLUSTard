
configfile: "config.yaml"

import pandas as pd
df_samples = pd.read_csv(config["samples"], sep ='\t', index_col = 0)
samples = df_samples["sample"].to_list()

JOBID = config["jobid"]
RAW_SR = config["RAW_DIR"]
REFIN = config["REFIN"]
CONTIG_T = config["CONTIG_T"]
P_THRESH = config["P_THRESH"]
krakendb = config["krakendb"]
kraken_level = str(config["kraken_level"])
GTDB = config["GTDB"]

(CLUSTERS,) = glob_wildcards("output/results/Cluster_{CLUSTER}.fasta")

rule all:
    input:
        expand("output/kraken/{JOBID}_Cluster_{CLUSTERS}_kraken.out", JOBID = JOBID, CLUSTERS = CLUSTERS),
        expand("output/kraken/{JOBID}_{kraken_level}_top_kraken.out", JOBID = JOBID, kraken_level = kraken_level),
        expand("output/prokka/Cluster_{CLUSTERS}/{JOBID}_{CLUSTERS}.err", JOBID = JOBID, CLUSTERS = CLUSTERS),
        expand("logs/{JOBID}_prokka_done.txt", JOBID = JOBID),
        expand("output/kraken/{JOBID}_{kraken_level}_GTDB_lookup.json", JOBID=JOBID, kraken_level = kraken_level),
        expand("output/results/{JOBID}_seqkit_stats.tsv", JOBID=JOBID),
        expand("output/{JOBID}_checkm/{JOBID}_checkm.log", JOBID=JOBID)

localrules: kraken_merge, output

rule kraken:
    input:
        "output/results/Cluster_{CLUSTERS}.fasta"
    output:
        report = "output/kraken/{JOBID}_Cluster_{CLUSTERS}_report_kraken.out",
    params:
        db = krakendb,
        output = "output/kraken/{JOBID}_Cluster_{CLUSTERS}_kraken.out"
    conda:
        "../envs/kraken2.yaml"
    threads:
        16
    resources:
        mem_mb = 4000
    shell:
        """
        kraken2 -db {params.db} --threads {threads} --report {output.report} --output {params.output} --use-names {input}
        """

rule kraken_merge:
    input:
        report = expand("output/kraken/{JOBID}_Cluster_{CLUSTERS}_report_kraken.out", JOBID = JOBID, CLUSTERS = CLUSTERS)
    output:
        "output/kraken/{JOBID}_{kraken_level}_top_kraken.out"
    params:
        level = {kraken_level}
    shell:
        """
        cd output/kraken
        find -name '{JOBID}*_report_kraken.out' -type f -printf '\\n%p\\t' -exec sh -c 'echo {{}} | sort -k1nr {{}} | grep -P "\\t{params.level}\\t" | head -n1 ' \\; > {JOBID}_{params.level}_top_kraken.out
        """

rule prokka:
    input:
        clusters = "output/results/Cluster_{CLUSTERS}.fasta",
    output:
        file = "output/{JOBID}_prokka/Cluster_{CLUSTERS}/{JOBID}_{CLUSTERS}.err"
    params:
        dir = "output/{JOBID}_prokka/Cluster_{CLUSTERS}/",
        prefix = "{JOBID}_{CLUSTERS}",
        prokka = "output/results/Cluster_{CLUSTERS}_short.fasta"
    conda:
        "../envs/prokka.yaml"
    threads:
        20
    shell:
        """
        awk '/^>/{{print substr($1,1,21); next}}{{print}}' < {input.clusters} > {params.prokka}
        prokka {params.prokka} --outdir {params.dir} --prefix {params.prefix} --cpus {threads} --force
        rm {params.prokka}
        """

rule prokka_force:
    input:
        prokka_all = expand("output/{JOBID}_prokka/Cluster_{CLUSTERS}/{JOBID}_{CLUSTERS}.err", JOBID = JOBID, CLUSTERS = CLUSTERS)
    output:
        touch("logs/{JOBID}_prokka_done.txt")

if GTDB == "Y":
    rule GTDB_download:
      input:
        kraken_top = expand("output/kraken/{JOBID}_{kraken_level}_top_kraken.out", JOBID = JOBID, kraken_level = kraken_level)
      output:
        bac120_gtdb_r95 = "tmp/gtdb/bac120_metadata_r95.tsv",
        ar122_gtdb_r95 = "tmp/gtdb/ar122_metadata_r95.tsv"
      params:
        loc = "tmp/gtdb/"
      shell:
        """
        if wget -q --spider https://data.ace.uq.edu.au/public/gtdb/data/releases/release95/95.0/bac120_metadata_r95.tar.gz; then
          wget -O {params.loc}bac120_metadata_r95.tar.gz https://data.ace.uq.edu.au/public/gtdb/data/releases/release95/95.0/bac120_metadata_r95.tar.gz
          tar -xf {params.loc}bac120_metadata_r95.tar.gz -C {params.loc}
        fi

        if wget -q --spider https://data.ace.uq.edu.au/public/gtdb/data/releases/release95/95.0/ar122_metadata_r95.tar.gz; then
          wget -O {params.loc}ar122_metadata_r95.tar.gz https://data.ace.uq.edu.au/public/gtdb/data/releases/release95/95.0/ar122_metadata_r95.tar.gz
          tar -xf {params.loc}ar122_metadata_r95.tar.gz -C {params.loc}
        fi
        """

    rule gtdb_lookup:
      input:
        bac120_gtdb_r95 = "tmp/gtdb/bac120_metadata_r95.tsv",
        ar122_gtdb_r95 = "tmp/gtdb/ar122_metadata_r95.tsv",
        kraken_top = expand("output/kraken/{JOBID}_{kraken_level}_top_kraken.out", JOBID = JOBID, kraken_level = kraken_level)
      output:
        json_lookup = "output/kraken/{JOBID}_{kraken_level}_GTDB_lookup.json"
      params:
        level = {kraken_level}
      shell:
        """
        python scripts/gtdb_lookup.py {input.kraken_top} {params.level} {input.bac120_gtdb_r95} {input.ar122_gtdb_r95} {output.json_lookup}
        """

elif GTDB == "N":
    rule empty_lookup:
      input:
        kraken_top = expand("output/kraken/{JOBID}_{kraken_level}_top_kraken.out", JOBID = JOBID, kraken_level = kraken_level)
      output:
        "output/kraken/{JOBID}_{kraken_level}_GTDB_lookup.json"
      shell:
        """
        touch {output}
        """

rule seqkit:
  input:
      wait_for = expand("output/kraken/{JOBID}_{kraken_level}_GTDB_lookup.json", JOBID = JOBID, kraken_level = kraken_level),
      prokka_out = expand("logs/{JOBID}_prokka_done.txt", JOBID=JOBID)
  output:
      "output/results/{JOBID}_seqkit_stats.tsv"
  conda:
      "../envs/py3.yaml"
  threads:
      10
  shell:
      """
      seqkit stats -a -T -j {threads} output/results/*.fasta > {output}
      """

rule checkm:
  input:
      expand("output/results/Cluster_{CLUSTERS}.fasta", CLUSTERS = CLUSTERS),
      expand("output/results/{JOBID}_seqkit_stats.tsv", JOBID=JOBID),
  output:
      expand("output/{JOBID}_checkm/{JOBID}_checkm.log", JOBID=JOBID)
  params:
      out = expand("output/{JOBID}_checkm", JOBID=JOBID),
      input = "output/results",
      refin = REFIN,
      checkmdb = config["checkm_db_root"]
  threads:
      20
  conda:
      "../envs/checkm.yaml"
  shell:
      """
      checkm_db={params.checkmdb}
      echo ${{checkm_db}} | checkm data setRoot ${{checkm_db}}
      checkm unbinned -x fasta output/results/ {params.refin} output/results/{JOBID}_unbinned_contigs.fa output/results/{JOBID}_unbinned_contigs_stats.tsv
      checkm lineage_wf -f {output} --tab_table -x fasta -t {threads} {params.input} {params.out}
      """
