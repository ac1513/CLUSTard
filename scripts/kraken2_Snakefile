configfile: "config.yaml"

import pandas as pd
df_samples = pd.read_csv(config["samples"], sep ='\t', index_col = 0)
samples = df_samples["sample"].to_list()

JOBID = config["jobid"]
RAW_SR = config["RAW_SR"]
REFIN = config["REFIN"]
CONTIG_T = config["CONTIG_T"]
P_THRESH = config["P_THRESH"]
krakendb = config["krakendb"]
kraken_level = str(config["kraken_level"])

(CLUSTERS,) = glob_wildcards("results/Cluster_{CLUSTER}.csv")

localrules: kraken_merge

rule all:
    input:
        expand("kraken/{JOBID}_Cluster_{CLUSTERS}_kraken.out", JOBID = JOBID, CLUSTERS = CLUSTERS),
        expand("kraken/{JOBID}_{kraken_level}_top_kraken.out", JOBID = JOBID, kraken_level = kraken_level)

rule kraken:
    input:
        "results/Cluster_{CLUSTERS}.fasta"
    output:
        report = "kraken/{JOBID}_Cluster_{CLUSTERS}_report_kraken.out"
    threads:
        4
    params:
        db = krakendb,
        output = "kraken/{JOBID}_Cluster_{CLUSTERS}_kraken.out"
    conda:
        "envs/kraken2.yaml"
    shell:
        """
        kraken2 -db {params.db} --threads {threads} --report {output.report} --output {params.output} --use-names {input}
        """

rule kraken_merge:
    input:
        report = expand("kraken/{JOBID}_Cluster_{CLUSTERS}_report_kraken.out", JOBID = JOBID, CLUSTERS = CLUSTERS)
    output:
        "kraken/{JOBID}_{kraken_level}_top_kraken.out"
    params:
        level = {kraken_level}
    shell:
        """
        cd kraken
        echo {params.level}
        find -name '{JOBID}*_report_kraken.out' -type f -printf '\\n%p\\t' -exec sh -c 'echo {{}} | sort -k1nr {{}} | grep -P "\\t{params.level}\\t" | head -n1 ' \\; > {JOBID}_{kraken_level}_top_kraken.out
        """
